---
alwaysApply: true
---

# QA Automation Project Rules (Cypress JS + Cursor AI)

## 1. Structure
Keep this tree:
/cypress
/e2e/{smoke,regression}
/fixtures
/pages
/pages/components
/actions
/support/{commands.js,e2e.js}
/utils
/docs
/reports
.env
cypress.config.js
.eslintrc.cjs
.prettierrc
package.json

php
Copy code
JS only. Folders lowercase. Reports/videos gitignored.

## 2. Cypress Config
Environment handling:
```js
const { defineConfig } = require('cypress')
require('dotenv').config()
module.exports = defineConfig({
  e2e: {
    specPattern: 'cypress/e2e/**/*.{cy,spec}.js',
    supportFile: 'cypress/support/e2e.js',
    viewportWidth:1440,viewportHeight:900,
    retries:{runMode:2,openMode:0},
    defaultCommandTimeout:8000,pageLoadTimeout:60000,
    setupNodeEvents(on,config){
      const e=config.env.environment
      if(e==='qa')config.baseUrl=process.env.BASE_URL||'https://tienda1.qa.eleaddev.com'
      else if(e==='staging')config.baseUrl=process.env.BASE_URL||'https://aya.stg.eleaddev.com'
      else if(e==='production')config.baseUrl=process.env.PRODUCTION_URL||'https://example.com'
      else config.baseUrl=process.env.BASE_URL||'http://localhost:3000'
      require('cypress-mochawesome-reporter/plugin')(on)
      return config
    }
  },
  reporter:'cypress-mochawesome-reporter',
  reporterOptions:{reportDir:'reports',charts:true,overwrite:false,html:true,json:true}
})
3. ESLint & Prettier
.eslintrc.cjs

js
Copy code
module.exports={
 root:true,env:{node:true,es2021:true},
 plugins:['cypress'],
 extends:['eslint:recommended','plugin:cypress/recommended','prettier'],
 rules:{'cypress/no-unnecessary-waiting':'error'},
 overrides:[
  {files:['cypress/e2e/**/*.js'],
   rules:{
    'no-restricted-imports':['error',{patterns:['**/cypress/pages/*']}],
    'no-restricted-properties':['error',{object:'cy',property:'get',message:'Use Actions > Pages only.'}]
   }},
  {files:['cypress/actions/**/*.js'],
   rules:{'no-restricted-properties':['error',{object:'cy',property:'get',message:'Only Pages may use cy.get.'}]}}
 ]
}
.prettierrc

json
Copy code
{"semi":false,"singleQuote":true,"trailingComma":"all"}
.gitignore

bash
Copy code
cypress/videos/
cypress/screenshots/
reports/
playwright-report/
4. Support
commands.js

js
Copy code
Cypress.Commands.add('loginByApi',(e,p)=>{
 cy.request('POST','/api/auth/login',{email:e,password:p})
   .then(({body})=>window.localStorage.setItem('token',body.token))
})
Cypress.Commands.add('dataTest',id=>cy.get(`[data-testid="${id}"]`))
e2e.js

js
Copy code
import 'cypress-mochawesome-reporter/register'
import './commands'
beforeEach(()=>{cy.clearCookies();cy.clearLocalStorage()})
Cypress.on('window:before:load',win=>cy.stub(win.console,'error').as('consoleError'))
afterEach(()=>{cy.get('@consoleError').then(s=>{if(s.callCount>0)throw new Error('Console errors found')})})
5. Page Objects
One file per page/component. Only selectors + atomic actions.

js
Copy code
class LoginPage{
 visit(){cy.visit('/login')}
 email(){return cy.dataTest('email')}
 password(){return cy.dataTest('password')}
 submit(){return cy.dataTest('login-submit')}
 fillEmail(v){this.email().clear().type(v)}
 fillPassword(v){this.password().clear().type(v,{log:false})}
 submitForm(){this.submit().click()}
}
module.exports={LoginPage}
6. Actions
Each function = one business flow. Specs call actions, not pages.

js
Copy code
const{LoginPage}=require('../pages/LoginPage')
const authActions={
 uiLogin(e,p){
  const l=new LoginPage()
  l.visit();l.fillEmail(e);l.fillPassword(p);l.submitForm()
  cy.url().should('include','/home')
 }}
module.exports={authActions}
7. Fixtures & Data
Keep small static JSON under /fixtures. Read-only.

js
Copy code
cy.fixture('users/admin').as('admin')
cy.get('@admin').then(u=>cy.loginByApi(u.email,u.password))
cy.intercept('GET','/api/orders*',{fixture:'api/orders/list.json'}).as('getOrders')
cy.wait('@getOrders').its('response.statusCode').should('eq',200)
Dynamic data:

js
Copy code
export function randomEmail(p='user'){return`${p}${Date.now()}@example.com`}
8. Network Control
Never cy.wait(n). Always alias intercepts.

js
Copy code
cy.intercept('GET','/api/orders*').as('orders')
cy.visit('/orders')
cy.wait('@orders').its('response.statusCode').should('eq',200)
cy.dataTest('order-row').should('have.length.at.least',1)
9. Tests & Tags
Names: should <do> when <condition>. Unique titles. Optional @smoke.

js
Copy code
it('should place order @smoke',{tags:['smoke']},()=>{/*...*/})
Duplicate check script (optional)

js
Copy code
const fs=require('fs'),p=require('path')
function files(d){return fs.readdirSync(d,{withFileTypes:true}).flatMap(e=>e.isDir()?files(p.join(d,e.name)):e.name.endsWith('.cy.js')?[p.join(d,e.name)]:[])}
const m=new Map();for(const f of files('cypress/e2e')){const c=fs.readFileSync(f,'utf8');const r=/it\(['"`]([^'"`]+)['"`]/g;let x;while(x=r.exec(c))(m.get(x[1])||m.set(x[1],[])).push(f)}
for(const[t,fsx]of m)if(fsx.length>1){console.error('Duplicate:',t,fsx);process.exit(1)}
10. Cursor Behavior
Default edit in place. No new .md or .cy.js unless NEW_SPEC or NEW_DOC tokens used.
Allowed docs: README.md, docs/selector-policy.md.
Show diff plan before creating new files.

11. Cursor POM Enforcement
If raw cy.get or inline selectors found:

Move selectors to Page under /pages.

Move flows to Action under /actions.

Spec calls Action only.

Replace waits with intercept+assert.

Quick prompt:

vbnet
Copy code
Refactor this spec to POM:
edit same file, move selectors to Pages, flows to Actions.
12. Cleanup
Remove unused or duplicate specs/pages/actions/configs.
Keep one cypress.config.js, eslint, prettier.
Delete /integration, old cypress.json, committed artifacts.
Merge duplicates into canonical files.
Create CLEANUP_PLAN.md summarizing moves.
Validation:

No raw selectors in specs/actions

No duplicate titles

Smoke suite passes

CLEANUP_PLAN.md exists

13. CI
.github/workflows/cypress.yml

yml
Copy code
name:e2e
on:[push,pull_request]
jobs:
 run:
  runs-on:ubuntu-latest
  strategy:{matrix:{env:[qa,staging],browser:[chrome,firefox]}}
  steps:
   -uses:actions/checkout@v4
   -uses:actions/setup-node@v4
    with:{node-version:20,cache:npm}
   -run:npm ci
   -run:npx cypress verify
   -run:ENVIRONMENT=${{matrix.env}} npm run cy:run:qa
   -run:npm run report:merge && npm run report:html
   -uses:actions/upload-artifact@v4
    with:{name:cypress-artifacts-${{matrix.env}},path:reports}
14. Pre-Commit
package.json

json
Copy code
{"lint-staged":{"*.{js,json,md}":["prettier -w","eslint --fix"]},"scripts":{"prepare":"husky"}}
.husky/pre-commit

bash
Copy code
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"
npx lint-staged
node scripts/check-duplicate-test-titles.js
15. Docs
Only modify README.md or docs/selector-policy.md.
Optional guard:

js
Copy code
const{execSync}=require('child_process')
const f=execSync('git diff --cached --name-only',{encoding:'utf8'}).split('\n')
 .filter(x=>x.endsWith('.md')&&x&&!x.startsWith('docs/')&&x!=='README.md')
if(f.length){console.error('Blocked new md:',f);process.exit(1)}
16. Selector Policy
Every interactive element uses data-testid.
Format: module-element-state, kebab-case.
Avoid text or nth-child.

17. Accessibility
(optional)

js
Copy code
import 'cypress-axe'
cy.injectAxe()
cy.checkA11y(null,{includedImpacts:['critical','serious']})
18. Cursor Cleanup
Before creating files, search for existing.
Merge duplicates, update imports.
Edit in place, never remove secrets or CI configs.
Generate CLEANUP_PLAN.md with before/after summary.

19. Validation
ESLint & Prettier pass

No duplicate titles

No stray .md

Cypress smoke suite passes

Artifacts ignored

One config per tool

CLEANUP_PLAN.md updated

yaml
Copy code
# QA Automation Project Rules (Cypress JS + Cursor AI)

## 1. Structure
Keep this tree:
/cypress
/e2e/{smoke,regression}
/fixtures
/pages
/pages/components
/actions
/support/{commands.js,e2e.js}
/utils
/docs
/reports
.env
cypress.config.js
.eslintrc.cjs
.prettierrc
package.json

php
Copy code
JS only. Folders lowercase. Reports/videos gitignored.

## 2. Cypress Config
Environment handling:
```js
const { defineConfig } = require('cypress')
require('dotenv').config()
module.exports = defineConfig({
  e2e: {
    specPattern: 'cypress/e2e/**/*.{cy,spec}.js',
    supportFile: 'cypress/support/e2e.js',
    viewportWidth:1440,viewportHeight:900,
    retries:{runMode:2,openMode:0},
    defaultCommandTimeout:8000,pageLoadTimeout:60000,
    setupNodeEvents(on,config){
      const e=config.env.environment
      if(e==='qa')config.baseUrl=process.env.BASE_URL||'https://tienda1.qa.eleaddev.com'
      else if(e==='staging')config.baseUrl=process.env.BASE_URL||'https://aya.stg.eleaddev.com'
      else if(e==='production')config.baseUrl=process.env.PRODUCTION_URL||'https://example.com'
      else config.baseUrl=process.env.BASE_URL||'http://localhost:3000'
      require('cypress-mochawesome-reporter/plugin')(on)
      return config
    }
  },
  reporter:'cypress-mochawesome-reporter',
  reporterOptions:{reportDir:'reports',charts:true,overwrite:false,html:true,json:true}
})
3. ESLint & Prettier
.eslintrc.cjs

js
Copy code
module.exports={
 root:true,env:{node:true,es2021:true},
 plugins:['cypress'],
 extends:['eslint:recommended','plugin:cypress/recommended','prettier'],
 rules:{'cypress/no-unnecessary-waiting':'error'},
 overrides:[
  {files:['cypress/e2e/**/*.js'],
   rules:{
    'no-restricted-imports':['error',{patterns:['**/cypress/pages/*']}],
    'no-restricted-properties':['error',{object:'cy',property:'get',message:'Use Actions > Pages only.'}]
   }},
  {files:['cypress/actions/**/*.js'],
   rules:{'no-restricted-properties':['error',{object:'cy',property:'get',message:'Only Pages may use cy.get.'}]}}
 ]
}
.prettierrc

json
Copy code
{"semi":false,"singleQuote":true,"trailingComma":"all"}
.gitignore

bash
Copy code
cypress/videos/
cypress/screenshots/
reports/
playwright-report/
4. Support
commands.js

js
Copy code
Cypress.Commands.add('loginByApi',(e,p)=>{
 cy.request('POST','/api/auth/login',{email:e,password:p})
   .then(({body})=>window.localStorage.setItem('token',body.token))
})
Cypress.Commands.add('dataTest',id=>cy.get(`[data-testid="${id}"]`))
e2e.js

js
Copy code
import 'cypress-mochawesome-reporter/register'
import './commands'
beforeEach(()=>{cy.clearCookies();cy.clearLocalStorage()})
Cypress.on('window:before:load',win=>cy.stub(win.console,'error').as('consoleError'))
afterEach(()=>{cy.get('@consoleError').then(s=>{if(s.callCount>0)throw new Error('Console errors found')})})
5. Page Objects
One file per page/component. Only selectors + atomic actions.

js
Copy code
class LoginPage{
 visit(){cy.visit('/login')}
 email(){return cy.dataTest('email')}
 password(){return cy.dataTest('password')}
 submit(){return cy.dataTest('login-submit')}
 fillEmail(v){this.email().clear().type(v)}
 fillPassword(v){this.password().clear().type(v,{log:false})}
 submitForm(){this.submit().click()}
}
module.exports={LoginPage}
6. Actions
Each function = one business flow. Specs call actions, not pages.

js
Copy code
const{LoginPage}=require('../pages/LoginPage')
const authActions={
 uiLogin(e,p){
  const l=new LoginPage()
  l.visit();l.fillEmail(e);l.fillPassword(p);l.submitForm()
  cy.url().should('include','/home')
 }}
module.exports={authActions}
7. Fixtures & Data
Keep small static JSON under /fixtures. Read-only.

js
Copy code
cy.fixture('users/admin').as('admin')
cy.get('@admin').then(u=>cy.loginByApi(u.email,u.password))
cy.intercept('GET','/api/orders*',{fixture:'api/orders/list.json'}).as('getOrders')
cy.wait('@getOrders').its('response.statusCode').should('eq',200)
Dynamic data:

js
Copy code
export function randomEmail(p='user'){return`${p}${Date.now()}@example.com`}
8. Network Control
Never cy.wait(n). Always alias intercepts.

js
Copy code
cy.intercept('GET','/api/orders*').as('orders')
cy.visit('/orders')
cy.wait('@orders').its('response.statusCode').should('eq',200)
cy.dataTest('order-row').should('have.length.at.least',1)
9. Tests & Tags
Names: should <do> when <condition>. Unique titles. Optional @smoke.

js
Copy code
it('should place order @smoke',{tags:['smoke']},()=>{/*...*/})
Duplicate check script (optional)

js
Copy code
const fs=require('fs'),p=require('path')
function files(d){return fs.readdirSync(d,{withFileTypes:true}).flatMap(e=>e.isDir()?files(p.join(d,e.name)):e.name.endsWith('.cy.js')?[p.join(d,e.name)]:[])}
const m=new Map();for(const f of files('cypress/e2e')){const c=fs.readFileSync(f,'utf8');const r=/it\(['"`]([^'"`]+)['"`]/g;let x;while(x=r.exec(c))(m.get(x[1])||m.set(x[1],[])).push(f)}
for(const[t,fsx]of m)if(fsx.length>1){console.error('Duplicate:',t,fsx);process.exit(1)}
10. Cursor Behavior
Default edit in place. No new .md or .cy.js unless NEW_SPEC or NEW_DOC tokens used.
Allowed docs: README.md, docs/selector-policy.md.
Show diff plan before creating new files.

11. Cursor POM Enforcement
If raw cy.get or inline selectors found:

Move selectors to Page under /pages.

Move flows to Action under /actions.

Spec calls Action only.

Replace waits with intercept+assert.

Quick prompt:

vbnet
Copy code
Refactor this spec to POM:
edit same file, move selectors to Pages, flows to Actions.
12. Cleanup
Remove unused or duplicate specs/pages/actions/configs.
Keep one cypress.config.js, eslint, prettier.
Delete /integration, old cypress.json, committed artifacts.
Merge duplicates into canonical files.
Create CLEANUP_PLAN.md summarizing moves.
Validation:

No raw selectors in specs/actions

No duplicate titles

Smoke suite passes

CLEANUP_PLAN.md exists

13. CI
.github/workflows/cypress.yml

yml
Copy code
name:e2e
on:[push,pull_request]
jobs:
 run:
  runs-on:ubuntu-latest
  strategy:{matrix:{env:[qa,staging],browser:[chrome,firefox]}}
  steps:
   -uses:actions/checkout@v4
   -uses:actions/setup-node@v4
    with:{node-version:20,cache:npm}
   -run:npm ci
   -run:npx cypress verify
   -run:ENVIRONMENT=${{matrix.env}} npm run cy:run:qa
   -run:npm run report:merge && npm run report:html
   -uses:actions/upload-artifact@v4
    with:{name:cypress-artifacts-${{matrix.env}},path:reports}
14. Pre-Commit
package.json

json
Copy code
{"lint-staged":{"*.{js,json,md}":["prettier -w","eslint --fix"]},"scripts":{"prepare":"husky"}}
.husky/pre-commit

bash
Copy code
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"
npx lint-staged
node scripts/check-duplicate-test-titles.js
15. Docs
Only modify README.md or docs/selector-policy.md.
Optional guard:

js
Copy code
const{execSync}=require('child_process')
const f=execSync('git diff --cached --name-only',{encoding:'utf8'}).split('\n')
 .filter(x=>x.endsWith('.md')&&x&&!x.startsWith('docs/')&&x!=='README.md')
if(f.length){console.error('Blocked new md:',f);process.exit(1)}
16. Selector Policy
Every interactive element uses data-testid.
Format: module-element-state, kebab-case.
Avoid text or nth-child.

17. Accessibility
(optional)

js
Copy code
import 'cypress-axe'
cy.injectAxe()
cy.checkA11y(null,{includedImpacts:['critical','serious']})
18. Cursor Cleanup
Before creating files, search for existing.
Merge duplicates, update imports.
Edit in place, never remove secrets or CI configs.
Generate CLEANUP_PLAN.md with before/after summary.

19. Validation
ESLint & Prettier pass

No duplicate titles

No stray .md

Cypress smoke suite passes

Artifacts ignored

One config per tool

CLEANUP_PLAN.md updated


